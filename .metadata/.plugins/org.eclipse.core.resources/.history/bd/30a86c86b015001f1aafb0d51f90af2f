package com.example.SCM.controller;

import java.io.File;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.security.Principal;
import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.ClassPathResource;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;

import com.example.SCM.DAO.ContactRepo;
import com.example.SCM.DAO.UserRepo;
import com.example.SCM.helper.Message;
import com.example.SCM.model.Contact;
import com.example.SCM.model.User;

import jakarta.servlet.http.HttpSession;

@Controller
@RequestMapping("/user")
public class UserController {
	
	@Autowired
	private UserRepo userRepo;
	@Autowired
	private ContactRepo contactRepo;
	// method to adding common data to respose
	@ModelAttribute
	public void addCommonData(Model model,Principal principal)
	{
		String userName=principal.getName();
		
		User user=userRepo.getUserByUserName(userName);
		model.addAttribute(user);
	}
	// dashboard home
	@GetMapping("/index")
	public String dashboard(Model model, Principal principal)
	{
		String userName=principal.getName();
		User user=userRepo.getUserByUserName(userName);
		model.addAttribute(user);
		
		
		return "normal/userDashboard";
	}
	//open add form handler
	@GetMapping("/add-contact")
	public String openAddContactForm(Model model)
	{
		model.addAttribute("title","Add Contact");
		model.addAttribute("contact", new Contact());
		return "normal/add_contact_form";
	}
	
	// getting the data for add contact
	@PostMapping("/process-contact")
	public String processContact(@ModelAttribute Contact contact,@RequestParam("profileImage") MultipartFile file,
			Principal principal, HttpSession session )
	{
		try {
			String name= principal.getName();
			User user=this.userRepo.getUserByUserName(name);
			// processing and uploading file
			if(file.isEmpty())
			{
				System.out.println("There is no file");
				contact.setImage("Profile.png");
			}
			else
				
			{
				System.out.println("We have a image file");
				// upload the file to folder and update the name to contact
				contact.setImage(file.getOriginalFilename());
				File saveFile=new ClassPathResource("static/img").getFile();
				Path path=Paths.get(saveFile.getAbsolutePath()+File.separator+file.getOriginalFilename());
				Files.copy(file.getInputStream(),path , StandardCopyOption.REPLACE_EXISTING);
				System.out.println("Image got uploaded");
			}
			contact.setUser(user);
			user.getContacts().add(contact);
			this.userRepo.save(user);
			System.out.println("Contact Added");
			// message success .....
			session.setAttribute("message", new Message("Your Contact is added", "success"));
			
		}
		catch(Exception e)
		{
			System.out.println("Error"+e.getMessage());
			e.printStackTrace();
			// error message
			session.setAttribute("message", new Message("Your Contact is not added", "danger"));
		}
		return "normal/add_contact_form";
	}
	// show contact handler
	// per page now it is 5 contact
	@GetMapping("/show-contacts/{page}")
	public String showContacts(@PathVariable("page")int page ,Model m, Principal principal)
	{
		m.addAttribute("title", "Show User Contacts");
		String userName=principal.getName();
		User user=this.userRepo.getUserByUserName(userName);
		Pageable pageable =PageRequest.of(page, 5);
		Page<Contact> contacts=this.contactRepo.findContactByUser(user.getId(),pageable);
		m.addAttribute("contacts", contacts);
		m.addAttribute("currentPage", page);
		m.addAttribute("totalPages", contacts.getTotalPages());
		return "normal/show_contacts";
	}
	
	// showing particular contact detail
//	@GetMapping("/{cid}/contact")
//	public String showContactDetail(@PathVariable("cid") Integer cid, Model model)
//	{
//		 Optional<Contact> optionalContact = this.contactRepo.findById(cid);
//		    Contact contact = optionalContact.orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND, "Contact not found"));
//		    model.addAttribute("contact", contact);
//		    return "normal/contact_detail";
//	}
	
	@GetMapping("/{cid}/contact")
	public String showContactDetail(@PathVariable("cid") Integer cid, Model model, Principal principal) {
	    Optional<Contact> optionalContact = this.contactRepo.findById(cid);
	    Contact contact = optionalContact.get();
	    String userName=principal.getName();
	    User user=this.userRepo.getUserByUserName(userName);
	    if(user.getId()==contact.getUser().getId())
	    {
	    	model.addAttribute("contact", contact);
	    	model.addAttribute("title", contact.getFirstname());
	    }
	    
	    return "normal/contact_detail";
	}
	// delete contact
	@GetMapping("/delete/{cid}")
	public String deleteContact(@PathVariable("cid") Integer cid, Model model, Principal principal, HttpSession session )
	{
		Contact contact=this.contactRepo.findById(cid).get();
		// check for unauthorised delete req
		String userName=principal.getName();
		User user=this.userRepo.getUserByUserName(userName);
		if(user.getId()==contact.getUser().getId())
		{
			contact.setUser(null);
			this.contactRepo.delete(contact);
			session.setAttribute("message", new Message("Contact Deleted Successfully","success"));
		}
		return "redirect:/user/show-contacts/0";
	}
	//open updateform for  contact
	@PostMapping("/update-contact/{cid}")
	public String updateForm(Model model,@PathVariable("cid") Integer cid)
	{
		model.addAttribute("title", "contact update form");
		Contact contact=this.contactRepo.findById(cid).get();
		model.addAttribute("contact",contact);
		return "normal/update_form";
	}
	//update contact handler
	@PostMapping("/process-update")
	public String updateHandler(@ModelAttribute Contact contact, @RequestParam("profileImage") MultipartFile file,
			Model m, HttpSession session, Principal principal)
	{
		System.out.println(contact.getCid());
		try {
			Contact current=this.contactRepo.findById(contact.getCid()).get();
			if(!file.isEmpty())
			{
				
				// update new file
				File saveFile=new ClassPathResource("static/img").getFile();
				Path path=Paths.get(saveFile.getAbsolutePath()+File.separator+file.getOriginalFilename());
				Files.copy(file.getInputStream(),path , StandardCopyOption.REPLACE_EXISTING);
				contact.setImage(file.getOriginalFilename());
			}
			else
			{
				contact.setImage(current.getImage());
			}
			User user=this.userRepo.getUserByUserName(principal.getName());
			contact.setUser(user);
			this.contactRepo.save(contact);
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		
		
		System.out.println(contact.getFirstname());
		return contact.getCid()+"/contact";
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	

}
